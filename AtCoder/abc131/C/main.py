#!/usr/bin/env python3
import sys
import math


def gcd(left: int, right: int) -> int:
    bigger, lesser = left, right
    if bigger < lesser:
        bigger, lesser = lesser, bigger

    div, mod = divmod(bigger, lesser)
    return gcd(lesser, mod) if mod else lesser


def lcm(left: int, right: int) -> int:
    return (left * right) // gcd(left, right)


def count(num: int, C: int, D: int) -> int:
    numC = num // C
    numD = num // D
    l = lcm(C, D)
    numCD = num // l
    return num - numC - numD + numCD


def solve(A: int, B: int, C: int, D: int):
    print(count(B, C, D) - count(A - 1, C, D))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():

    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    C = int(next(tokens))  # type: int
    D = int(next(tokens))  # type: int
    solve(A, B, C, D)


if __name__ == '__main__':
    main()
