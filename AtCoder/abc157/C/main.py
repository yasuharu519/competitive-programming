#!/usr/bin/env python3
import sys


def solve(N: int, M: int, s: "List[int]", c: "List[int]"):
    digimap = {}

    for si, ci in zip(s, c):
        if not si in digimap:
            digimap[si] = ci
        else:
            if ci != digimap[si]:
                print(-1)
                return

    if 1 in digimap and digimap[1] == 0:
        if N == 1:
            print(0)
            return
        else:
            print(-1)
            return

    res = []
    for i in range(1, N + 1):
        if i in digimap:
            res.append(digimap[i])
        else:
            res.append(0)

    print("".join([str(x) for x in res]))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():

    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    s = [int()] * (M)  # type: "List[int]"
    c = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        s[i] = int(next(tokens))
        c[i] = int(next(tokens))
    solve(N, M, s, c)


if __name__ == '__main__':
    main()
