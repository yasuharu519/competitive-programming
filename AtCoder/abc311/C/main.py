#!/usr/bin/env python3
import sys
from typing import Set


def solve(N: int, A: "List[int]"):

    def traverse(start: int) -> Set[int]:
        passed = set()
        node = start + 1
        path = []

        while node not in passed:
            passed.add(node)
            path.append(node)
            node = A[node - 1]
        
        head = A[path[-1]-1]
        index = path.index(head)
        return path[index:]
    
    result = traverse(0)
    print(len(result))
    print(" ".join([str(x) for x in result]))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
