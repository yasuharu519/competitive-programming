#!/usr/bin/env python3
import sys
import math


def solve(N: int, D: int, P: int, F: "List[int]"):
    F.sort(reverse=True)
    total = sum(F)

    for i in range(math.ceil(N / D)):
        index = i * D
        tmp_sum = sum(F[index:index + D])
        if P < tmp_sum:
            total -= tmp_sum
            total += P
        else:
            break

    print(total)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():

    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    D = int(next(tokens))  # type: int
    P = int(next(tokens))  # type: int
    F = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, D, P, F)


if __name__ == '__main__':
    main()
