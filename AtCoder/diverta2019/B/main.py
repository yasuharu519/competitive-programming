#!/usr/bin/env python3
import sys


def solve(R: int, G: int, B: int, N: int):

    count = 0
    nums = [R, G, B]
    nums.sort(reverse=True)

    def backtrack(index: int, current: int):
        nonlocal count
        if current > N:
            return

        if index == 0:
            for i in range((N // nums[index]) + 1):
                backtrack(index + 1, current + nums[index] * i)
        elif index == 1:
            for i in range(((N - current) // nums[index]) + 1):
                backtrack(index + 1, current + nums[index] * i)
        else:
            if current > N:
                return
            elif current == N or (N - current) % nums[index] == 0:
                count += 1
                return

    backtrack(0, 0)
    print(count)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():

    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    R = int(next(tokens))  # type: int
    G = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    solve(R, G, B, N)


if __name__ == '__main__':
    main()
