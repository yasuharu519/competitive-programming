#!/usr/bin/env python3
import sys


def solve(N: int, P: "List[int]", Q: int, A: "List[int]", B: "List[int]"):
    order_map = {}
    for i, P in enumerate(P):
        order_map[P] = i
    
    for a, b in zip(A, B):
        ai, bi = order_map[a], order_map[b]
        if ai < bi:
            print(a)
        else:
            print(b)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    P = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Q = int(next(tokens))  # type: int
    A = [int()] * (Q)  # type: "List[int]"
    B = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, P, Q, A, B)

if __name__ == '__main__':
    main()
