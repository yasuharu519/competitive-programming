#!/usr/bin/env python3
import sys
import math
from collections import Counter, defaultdict

def factorize(n: int):
    a = []
    while n % 2 == 0:
        a.append(2)
        n //= 2
    f = 3
    while f * f <= n:
        if n % f == 0:
            a.append(f)
            n //= f
        else:
            f += 2
    if n != 1: a.append(n)
    return frozenset({k: v % 2 for k, v in Counter(a).items() if v % 2 != 0 })

def solve(N: int, A: "List[int]"):
    patterns = defaultdict(int)
    counter = Counter(A)

    result = 0
    if 0 in counter:
        v = counter[0]
        result += (v * (N-v))
        if v > 1:
            result += math.comb(v, 2)
        del counter[0]
        
    for k, v in counter.items():
        pat = factorize(k)
        patterns[pat] += v
    for k, v in patterns.items():
        if v > 1:
            result += math.comb(v, 2)
    print(result)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
