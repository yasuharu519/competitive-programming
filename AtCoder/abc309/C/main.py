#!/usr/bin/env python3
import sys
import heapq


def solve(N: int, K: int, a: "List[int]", b: "List[int]"):
    heap = []
    total = 0
    for ia, ib in zip(a, b):
        total += ib
        heapq.heappush(heap, (ia, ib))

    if total <= K:
        print(1)
        return

    days = 1
    while total > K:
        a, b = heapq.heappop(heap)
        days = a + 1
        total -= b

    print(days)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():

    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    a = [int()] * (N)  # type: "List[int]"
    b = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    solve(N, K, a, b)


if __name__ == '__main__':
    main()
