#!/usr/bin/env python3
import sys
from collections import defaultdict


def solve(N: int, K: int, a: "List[int]"):
    counter_map = defaultdict(int)
    left = 0
    counter_map[a[0]] += 1
    res = 1

    for right in range(1, N):
        counter_map[a[right]] += 1
        while left < right and len(counter_map) > K:
            counter_map[a[left]] -= 1
            if counter_map[a[left]] == 0:
                del counter_map[a[left]]
            left += 1
        res = max(res, right - left + 1)
    print(res)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():

    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, a)


if __name__ == '__main__':
    main()
