#!/usr/bin/env python3
import sys
from collections import defaultdict

MOD = 10**5


def solve(N: int, K: int):
    visited = defaultdict(int)

    def get_next_val(val: int) -> int:
        sum_digits = sum([int(x) for x in str(val)])
        return (val + sum_digits) % MOD

    current = N
    counter = 0
    while current not in visited and K > 0:
        visited[current] = counter
        current = get_next_val(current)
        counter += 1
        K -= 1

    if K == 0:
        print(current)
        return

    loop_count = (counter - visited[current])
    K = K % loop_count
    while K > 0:
        current = get_next_val(current)
        K -= 1
    print(current)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():

    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    solve(N, K)


if __name__ == '__main__':
    main()
