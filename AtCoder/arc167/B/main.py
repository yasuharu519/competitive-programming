#!/usr/bin/env python3
import sys
import math

MOD = 998244353  # type: int


def solve(A: int, B: int):
    if B == 0:
        print(0)
        return

    # 約数の数を数える
    current = A
    divisors = []
    for divisor in range(2, math.ceil(math.sqrt(A)) + 1):
        if current == 1:
            break
        divided = 1
        while current % divisor == 0:
            current = (current // divisor)
            divided += 1
        if divided != 1:
            divisors.append(divided - 1)

    num_pattern = 1
    for d in divisors:
        num_pattern = (num_pattern * (1 + d * B))

    half = (num_pattern // 2) % MOD

    print(((B % MOD) * half) % MOD)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():

    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    solve(A, B)


if __name__ == '__main__':
    main()
