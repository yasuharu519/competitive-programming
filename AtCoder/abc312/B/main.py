#!/usr/bin/env python3
import sys


def solve(N: int, M: int, S: "List[str]"):

    cells_upper_left = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0),
                        (2, 1), (2, 2)]
    cells_down_right = [(6, 6), (6, 7), (6, 8), (7, 6), (7, 7), (7, 8), (8, 6),
                        (8, 7), (8, 8)]

    padding_left = [(3, 0), (3, 1), (3, 2), (3, 3), (2, 3), (1, 3), (0, 3)]
    padding_right = [(5, 5), (6, 5), (7, 5), (8, 5), (5, 6), (5, 7), (5, 8)]

    def is_tak_code(x: int, y: int) -> bool:
        if (x + 8) >= N or y + 8 >= M:
            return False
        # check black
        if not all([
                S[x + diff_x][y + diff_y] == "#"
                for diff_x, diff_y in cells_upper_left
        ]):
            return False
        if not all([
                S[x + diff_x][y + diff_y] == "#"
                for diff_x, diff_y in cells_down_right
        ]):
            return False

        # check padding
        if not all([
                S[x + diff_x][y + diff_y] == "."
                for diff_x, diff_y in padding_left
        ]):
            return False
        if not all([
                S[x + diff_x][y + diff_y] == "."
                for diff_x, diff_y in padding_right
        ]):
            return False

        return True

    res = []
    for i in range(N):
        for j in range(M):
            if S[i][j] == "#":
                if is_tak_code(i, j):
                    res.append((i + 1, j + 1))
    print("\n".join(["{} {}".format(x, y) for x, y in res]))

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():

    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(N)]  # type: "List[str]"
    solve(N, M, S)


if __name__ == '__main__':
    main()
